security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
            algorithm: 'auto'
            cost: 10  # Lower cost to prevent timeout during import
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        pegawai_provider:
            entity:
                class: App\Entity\Pegawai
                property: nip
        admin_provider:
            entity:
                class: App\Entity\Admin
                property: username
        chain_provider:
            chain:
                providers: ['admin_provider', 'pegawai_provider']
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: chain_provider
            form_login:
                login_path: app_login
                check_path: app_login
                enable_csrf: true
                default_target_path: app_absensi_dashboard
                success_handler: App\Security\LoginSuccessHandler
            remember_me:
                secret: '%kernel.secret%'
                lifetime: 2592000 # 30 days
                path: /
                domain: ~
                secure: false
                httponly: true
                samesite: lax
                always_remember_me: false
                remember_me_parameter: _remember_me
            logout:
                path: app_logout_secure
                target: app_login
                invalidate_session: true
                enable_csrf: true
                csrf_parameter: _csrf_token
                csrf_token_id: logout

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/login, roles: PUBLIC_ACCESS }
        - { path: ^/absensi/qr/schedule, roles: PUBLIC_ACCESS }
        # Admin panel - hanya untuk role admin (super_admin atau admin unit)
        - { path: ^/admin, roles: ROLE_ADMIN }
        # Absensi - untuk semua user yang sudah login (pegawai dan admin)
        - { path: ^/absensi, roles: ROLE_USER }
        # Dashboard user - untuk semua user yang sudah login
        - { path: ^/dashboard, roles: ROLE_USER }
        # Sisanya butuh login
        - { path: ^/, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
