{% extends 'base.html.twig' %}

{% block title %}Inspirasi - Motivasi Hari Ini{% endblock %}

{% block body %}
<!-- Custom Facebook-Style Header for INSPIRASI -->
<div class="bg-white sticky top-0 z-40 shadow-md border-b border-gray-200">
    <div class="container mx-auto px-4 py-3">
        <div class="flex items-center justify-between">
            <!-- Left: INSPIRASI Title (Large like Facebook logo) -->
            <div class="flex-1">
                <h1 class="text-3xl md:text-4xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent leading-tight">
                    üí° inspirasi
                </h1>
                <p class="text-xs md:text-sm text-gray-600 mt-0.5 md:mt-1 font-medium tracking-wide">
                    Inspirasi Hari Ini, Semangat Selamanya
                </p>
            </div>

            <!-- Right: Action Icons -->
            <div class="flex items-center gap-3 md:gap-4">
                <!-- Leaderboard Icon -->
                <a href="{{ path('app_ikhlas_leaderboard') }}"
                   class="flex items-center justify-center w-10 h-10 md:w-11 md:h-11 bg-gray-100 hover:bg-gray-200 rounded-full transition-all duration-200 hover:scale-110 active:scale-95"
                   title="Leaderboard">
                    <span class="text-xl md:text-2xl">üèÜ</span>
                </a>

                <!-- Favorites Icon -->
                <a href="{{ path('app_ikhlas_favorites') }}"
                   class="flex items-center justify-center w-10 h-10 md:w-11 md:h-11 bg-gray-100 hover:bg-gray-200 rounded-full transition-all duration-200 hover:scale-110 active:scale-95"
                   title="Favorit Saya">
                    <span class="text-xl md:text-2xl">üìö</span>
                </a>

                <!-- Notification Icon -->
                <a href="{{ path('app_notifikasi_index') }}"
                   class="relative flex items-center justify-center w-10 h-10 md:w-11 md:h-11 bg-gray-100 hover:bg-gray-200 rounded-full transition-all duration-200 hover:scale-110 active:scale-95"
                   title="Notifikasi">
                    <span class="text-xl md:text-2xl">üîî</span>
                    {% if app.user.unreadNotifications|default(0) > 0 %}
                    <span class="absolute -top-1 -right-1 w-5 h-5 bg-red-500 text-white text-xs flex items-center justify-center rounded-full border-2 border-white font-bold">
                        {{ app.user.unreadNotifications > 9 ? '9+' : app.user.unreadNotifications }}
                    </span>
                    {% endif %}
                </a>

                <!-- User Avatar/Menu -->
                <div class="relative">
                    {# Level-based border colors #}
                    {% set levelBorder = 'border-gray-300' %}
                    {% if app.user.currentLevel == 1 %}
                        {% set levelBorder = 'border-purple-500' %}
                    {% elseif app.user.currentLevel == 2 %}
                        {% set levelBorder = 'border-green-500' %}
                    {% elseif app.user.currentLevel == 3 %}
                        {% set levelBorder = 'border-blue-500' %}
                    {% elseif app.user.currentLevel == 4 %}
                        {% set levelBorder = 'border-yellow-400' %}
                    {% elseif app.user.currentLevel == 5 %}
                        {% set levelBorder = 'border-amber-500' %}
                    {% endif %}

                    <button id="userMenuButton"
                            onclick="toggleUserDropdown()"
                            class="flex items-center justify-center w-10 h-10 md:w-11 md:h-11 bg-gray-100 hover:bg-gray-200 rounded-full transition-all duration-200 hover:scale-110 active:scale-95">
                        {% if app.user.photo %}
                            <img src="/uploads/photos/{{ app.user.photo }}"
                                 alt="{{ app.user.nama }}"
                                 class="w-6 h-6 md:w-7 md:h-7 object-cover rounded-full border-4 {{ levelBorder }}"
                                 title="Level {{ app.user.currentLevel }} - {{ app.user.levelTitle }}">
                        {% else %}
                            <span class="text-xl md:text-2xl">üë§</span>
                        {% endif %}
                    </button>

                    <!-- Dropdown Menu -->
                    <div id="userDropdown"
                         class="hidden absolute right-0 top-full mt-2 bg-white border border-gray-200 rounded-lg shadow-xl min-w-[220px] z-50 transform opacity-0 scale-95 transition-all duration-200">
                        <!-- User Info Section -->
                        <div class="p-3 border-b border-gray-200 bg-gray-50 rounded-t-lg">
                            <div class="text-sm font-medium text-gray-900 truncate">{{ app.user.nama|default('User') }}</div>
                            <div class="text-xs text-gray-500 truncate">{{ app.user.jabatan|default('Pegawai') }}</div>
                            {% if app.user.unitKerja %}
                            <div class="text-xs text-gray-400 truncate">{{ app.user.unitKerja }}</div>
                            {% endif %}
                        </div>

                        <!-- Menu Items -->
                        <div class="py-1">
                            <a href="{{ path('app_profile_view') }}"
                               class="flex items-center px-4 py-3 text-sm text-gray-700 hover:bg-blue-50 hover:text-blue-600 transition-colors">
                                <span class="mr-3">üë§</span>
                                <span>Profil</span>
                            </a>
                            <a href="{{ path('app_dashboard') }}"
                               class="flex items-center px-4 py-3 text-sm text-gray-700 hover:bg-green-50 hover:text-green-600 transition-colors">
                                <span class="mr-3">üè†</span>
                                <span>Dashboard</span>
                            </a>
                            <hr class="my-1">
                            {% include 'components/logout_button.html.twig' with {
                                'style': 'w-full flex items-center px-4 py-3 text-sm text-red-600 hover:bg-red-50 hover:text-red-700 border-0 bg-transparent transition-colors',
                                'text': 'Logout',
                                'icon': 'üö™'
                            } %}
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
// Dropdown Toggle Script
function toggleUserDropdown() {
    const dropdown = document.getElementById('userDropdown');
    if (!dropdown) return;

    const isHidden = dropdown.classList.contains('hidden');

    if (isHidden) {
        dropdown.classList.remove('hidden');
        dropdown.offsetHeight;
        dropdown.classList.remove('opacity-0', 'scale-95');
        dropdown.classList.add('opacity-100', 'scale-100');
    } else {
        dropdown.classList.remove('opacity-100', 'scale-100');
        dropdown.classList.add('opacity-0', 'scale-95');
        setTimeout(() => {
            dropdown.classList.add('hidden');
        }, 200);
    }
}

// Close dropdown when clicking outside
document.addEventListener('click', function(event) {
    const dropdown = document.getElementById('userDropdown');
    const button = event.target.closest('#userMenuButton');

    if (!button && dropdown && !dropdown.contains(event.target)) {
        if (!dropdown.classList.contains('hidden')) {
            dropdown.classList.remove('opacity-100', 'scale-100');
            dropdown.classList.add('opacity-0', 'scale-95');
            setTimeout(() => {
                dropdown.classList.add('hidden');
            }, 200);
        }
    }
});
</script>

<div class="min-h-screen bg-gradient-to-b from-purple-50 via-pink-50 to-sky-50 pb-20">
    <div class="container mx-auto px-4 py-6">

        <!-- Quotes Feed - Facebook Style -->
        <div class="max-w-2xl mx-auto space-y-4">

            <!-- Create Quote Card -->
            <div class="bg-white rounded-xl shadow-md p-6">
                <div class="max-w-2xl mx-auto">
                    {# Textarea untuk create quote #}
                    <textarea
                        id="createQuoteInput"
                        rows="3"
                        placeholder="Apa kata semangatmu hari ini?"
                        maxlength="500"
                        class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 resize-none text-sm placeholder-gray-400 hover:border-purple-300 transition-colors"
                    ></textarea>

                    <div class="text-right mt-1">
                        <span id="charCounter" class="text-xs text-gray-500">0 / 500 karakter</span>
                    </div>

                    <div class="max-w-md mx-auto mt-4">
                        <div class="flex flex-col gap-4">
                            {# Icon Upload Foto dan Dropdown Kategori - Sejajar Horizontal #}
                            <div class="flex items-center justify-between gap-4">
                                {# Icon Upload - Kamera dan Galeri #}
                                <div class="flex items-center gap-3" style="transition: opacity 0.3s ease;">
                                    {# Icon Kamera - Membuka kamera belakang #}
                                    <label for="cameraInput" class="cursor-pointer transition-transform hover:scale-110 active:scale-95" title="Ambil Foto dengan Kamera">
                                        <div class="w-12 h-12 bg-white border-2 border-blue-400 rounded-xl flex items-center justify-center shadow-sm hover:shadow-md transition">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z" />
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z" />
                                            </svg>
                                        </div>
                                    </label>
                                    <input type="file"
                                           id="cameraInput"
                                           accept="image/*"
                                           capture="environment"
                                           onchange="handlePhotoUpload(event)"
                                           style="display: none;">

                                    {# Icon Galeri #}
                                    <label for="galleryInput" class="cursor-pointer transition-transform hover:scale-110 active:scale-95" title="Pilih dari Galeri">
                                        <div class="w-12 h-12 bg-white border-2 border-green-400 rounded-xl flex items-center justify-center shadow-sm hover:shadow-md transition">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-green-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                                            </svg>
                                        </div>
                                    </label>
                                    <input type="file"
                                           id="galleryInput"
                                           accept="image/*"
                                           multiple
                                           onchange="handlePhotoUpload(event)"
                                           style="display: none;">
                                </div>

                                {# Dropdown Kategori #}
                                <div class="flex-1">
                                    <select id="createQuoteCategory" class="w-full text-sm border-2 border-gray-300 rounded-xl px-4 py-3 focus:ring-2 focus:ring-blue-400 focus:border-blue-400 bg-white hover:border-blue-300 transition-colors font-medium">
                                        <option value="Gaspul">üöÄ Gaspul</option>
                                        <option value="Motivasi">üí™ Motivasi</option>
                                        <option value="Informasi">üì¢ Informasi</option>
                                        <option value="Keteladanan">‚≠ê Keteladanan</option>
                                        <option value="Integritas">üõ°Ô∏è Integritas</option>
                                        <option value="Pantun">üìñ Pantun</option>
                                    </select>
                                </div>
                            </div>

                            {# Container untuk preview foto #}
                            <div id="photoPreviewContainer" class="hidden grid grid-cols-2 gap-2">
                                <!-- Preview photos akan muncul di sini -->
                            </div>
                            <p id="photoInfo" class="hidden text-xs text-gray-400 flex items-center gap-1">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                                </svg>
                                Max 2 foto, 1MB per foto (JPG/PNG)
                            </p>

                            {# Tombol Submit dengan Background Solid untuk Keterbacaan Maksimal #}
                            <button
                                id="submitQuoteBtn"
                                class="w-full text-white px-6 py-4 rounded-2xl transition-all font-extrabold text-lg shadow-lg hover:shadow-xl active:scale-[0.98] disabled:opacity-50 disabled:cursor-not-allowed"
                                style="background: linear-gradient(135deg, #7c3aed 0%, #ec4899 50%, #7c3aed 100%); text-shadow: 0 2px 4px rgba(0, 0, 0, 0.4); letter-spacing: 0.5px; border: none;"
                                onmouseover="this.style.background='linear-gradient(135deg, #6d28d9 0%, #db2777 50%, #6d28d9 100%)'"
                                onmouseout="this.style.background='linear-gradient(135deg, #7c3aed 0%, #ec4899 50%, #7c3aed 100%)'"
                            >
                                üöÄ Bagikan Semangat
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            {% if quotes|length > 0 %}

            <!-- Quote Cards Loop -->
            {% for item in quotes %}
            {% set quote = item.quote %}
            {% set hasLiked = item.hasLiked %}
            {% set hasSaved = item.hasSaved %}

            <div class="quote-card bg-white rounded-xl shadow-md hover:shadow-lg transition-shadow duration-300 relative overflow-visible" data-quote-id="{{ quote.id }}">
                <!-- Card Header: Foto + Nama User + Waktu | Icon Favorite + Titik 3 -->
                <div class="p-4 pb-3 relative z-20">
                    <div class="flex items-center justify-between">
                        <!-- Left: Foto + Nama + Waktu -->
                        <div class="flex items-center gap-2">
                            <!-- User Photo -->
                            <div class="flex-shrink-0">
                                {# Author level-based border colors #}
                                {% set authorBorder = 'border-gray-300' %}
                                {% if item.authorLevel == 1 %}
                                    {% set authorBorder = 'border-purple-500' %}
                                {% elseif item.authorLevel == 2 %}
                                    {% set authorBorder = 'border-green-500' %}
                                {% elseif item.authorLevel == 3 %}
                                    {% set authorBorder = 'border-blue-500' %}
                                {% elseif item.authorLevel == 4 %}
                                    {% set authorBorder = 'border-yellow-400' %}
                                {% elseif item.authorLevel == 5 %}
                                    {% set authorBorder = 'border-amber-500' %}
                                {% endif %}

                                {% if item.authorPhoto %}
                                    <img src="/uploads/photos/{{ item.authorPhoto }}"
                                         alt="{{ quote.author }}"
                                         class="w-8 h-8 object-cover rounded-full border-2 {{ authorBorder }}"
                                         title="{{ quote.author }} - Level {{ item.authorLevel }}">
                                {% else %}
                                    <div class="w-8 h-8 rounded-full bg-gradient-to-br from-purple-400 to-pink-400 flex items-center justify-center border-2 {{ authorBorder }}">
                                        <span class="text-white font-bold text-xs">{{ quote.author|first|upper }}</span>
                                    </div>
                                {% endif %}
                            </div>

                            <!-- Name + Time -->
                            <div>
                                <h3 class="font-semibold text-gray-900 text-sm">{{ quote.author ?? 'Anonim' }}</h3>
                                <p class="text-[11px] text-gray-500" title="{{ quote.createdAt|time_tooltip }}">
                                    {{ quote.createdAt|time_ago }}
                                </p>
                            </div>
                        </div>

                        <!-- Right: Save Button + Three-Dots Menu -->
                        <div class="flex items-center gap-2 relative z-30">
                            <!-- Save Button -->
                            <button class="save-btn transition-transform hover:scale-110 {{ hasSaved ? 'text-yellow-500' : 'text-gray-400 hover:text-yellow-500' }}"
                                    data-quote-id="{{ quote.id }}"
                                    data-saved="{{ hasSaved ? 'true' : 'false' }}"
                                    title="{{ hasSaved ? 'Hapus dari favorit' : 'Simpan ke favorit' }}">
                                <span class="text-xl">{{ hasSaved ? 'üìå' : 'üîñ' }}</span>
                            </button>

                            <!-- Three-Dots Menu -->
                            <div class="relative quote-menu-container">
                                <button class="quote-menu-btn p-1.5 hover:bg-gray-100 rounded-full transition-colors"
                                        data-quote-id="{{ quote.id }}"
                                        data-quote-author="{{ quote.author }}"
                                        title="Opsi lainnya">
                                    <svg class="w-5 h-5 text-gray-600" fill="currentColor" viewBox="0 0 20 20">
                                        <path d="M10 6a2 2 0 110-4 2 2 0 010 4zM10 12a2 2 0 110-4 2 2 0 010 4zM10 18a2 2 0 110-4 2 2 0 010 4z"/>
                                    </svg>
                                </button>

                                <!-- Dropdown Menu (Hidden by default) - Z-Index Tinggi untuk Selalu di Atas -->
                                <div class="quote-menu-dropdown hidden absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-xl border border-gray-200 py-1 z-[100]">
                                    <!-- Save/Unsave Option -->
                                    <button class="menu-save-quote w-full text-left px-4 py-2.5 hover:bg-gray-50 transition-colors flex items-center gap-3 text-gray-700"
                                            data-quote-id="{{ quote.id }}"
                                            data-saved="{{ hasSaved ? 'true' : 'false' }}">
                                        <span class="text-lg">{{ hasSaved ? 'üìå' : 'üîñ' }}</span>
                                        <span class="text-sm font-medium">{{ hasSaved ? 'Hapus dari Favorit' : 'Simpan ke Favorit' }}</span>
                                    </button>

                                    <!-- Edit Option (Only for author) -->
                                    {% if quote.author == app.user.nama %}
                                    <button class="menu-edit-quote w-full text-left px-4 py-2.5 hover:bg-gray-50 transition-colors flex items-center gap-3 text-gray-700"
                                            data-quote-id="{{ quote.id }}">
                                        <span class="text-lg">‚úèÔ∏è</span>
                                        <span class="text-sm font-medium">Edit Quote</span>
                                    </button>

                                    <!-- Delete Option (Only for author) -->
                                    <button class="menu-delete-quote w-full text-left px-4 py-2.5 hover:bg-red-50 transition-colors flex items-center gap-3 text-red-600"
                                            data-quote-id="{{ quote.id }}">
                                        <span class="text-lg">üóëÔ∏è</span>
                                        <span class="text-sm font-medium">Hapus Quote</span>
                                    </button>
                                    {% endif %}

                                    <!-- Share Option -->
                                    <button class="menu-share-quote w-full text-left px-4 py-2.5 hover:bg-gray-50 transition-colors flex items-center gap-3 text-gray-700 border-t border-gray-100"
                                            data-quote-id="{{ quote.id }}">
                                        <span class="text-lg">üì§</span>
                                        <span class="text-sm font-medium">Bagikan Quote</span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Quote Content -->
                <div class="px-6 pt-2 pb-4 relative z-10">
                    {# Tampilkan foto jika ada - GRID LAYOUT (Foto1 | Foto2) #}
                    {% if quote.hasPhotos %}
                        {% set photoCount = quote.photos|length %}

                        <div class="photo-section mb-4">
                            <!-- Grid Layout: 1 foto = full width, 2 foto = 2 kolom, 3+ foto = grid -->
                            <div class="photo-grid-wrapper {% if photoCount == 1 %}grid grid-cols-1{% elseif photoCount == 2 %}grid grid-cols-2{% else %}grid grid-cols-2{% endif %} gap-2"
                                 data-photo-count="{{ photoCount }}">

                                {% for photo in quote.photos %}
                                <!-- Photo Item -->
                                <div class="photo-item relative rounded-lg overflow-hidden cursor-pointer hover:opacity-95 transition-opacity group {% if photoCount == 1 %}h-80{% elseif photoCount == 2 %}h-64{% else %}{% if loop.index == 1 %}col-span-2 h-64{% else %}h-48{% endif %}{% endif %}"
                                     onclick="openPhotoModalWithGallery(this, {{ loop.index0 }})"
                                     style="background: #f3f4f6;">
                                    <img src="/uploads/inspirasi/{{ photo }}"
                                         alt="Foto Inspirasi {{ loop.index }}"
                                         data-photo-index="{{ loop.index0 }}"
                                         style="width: 100%; height: 100%; object-fit: cover; display: block; position: relative; z-index: 10;"
                                         onerror="console.error('Failed to load:', this.src); this.style.display='none'; this.parentElement.innerHTML+='<div style=\'position: absolute; inset: 0; display: flex; align-items: center; justify-content: center; color: #6b7280;\'>‚ùå Gagal memuat foto<br>{{ photo }}</div>';">

                                    <!-- Hover overlay with zoom icon -->
                                    <div class="absolute inset-0 flex items-center justify-center" style="background: rgba(0,0,0,0); transition: background 0.3s; z-index: 20; pointer-events: none;">
                                        <div style="opacity: 0; transition: opacity 0.3s; background: rgba(255,255,255,0.9); padding: 0.5rem; border-radius: 9999px; box-shadow: 0 10px 15px -3px rgba(0,0,0,0.1);">
                                            <svg class="w-6 h-6 text-gray-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0zM10 7v3m0 0v3m0-3h3m-3 0H7"/>
                                            </svg>
                                        </div>
                                    </div>

                                    <!-- Photo counter badge (untuk multiple photos) -->
                                    {% if photoCount > 1 %}
                                    <div class="absolute top-2 right-2 bg-black/60 text-white text-xs px-2 py-1 rounded-full backdrop-blur-sm">
                                        {{ loop.index }} / {{ photoCount }}
                                    </div>
                                    {% endif %}
                                </div>
                                {% endfor %}

                            </div>
                        </div>
                    {% endif %}

                    {# Use cleanContent (without link) for display #}
                    {% set displayContent = item.cleanContent %}
                    {% set contentLength = displayContent|length %}
                    {% set shouldTruncate = contentLength > 150 %}

                    <blockquote class="quote-content text-gray-800 text-base md:text-lg leading-relaxed italic font-light mb-3" data-full-content="{{ displayContent }}" data-truncated="{{ shouldTruncate ? 'true' : 'false' }}">
                        {% if shouldTruncate %}
                            <span class="quote-text">"{{ displayContent[:150] }}..."</span>
                            <span class="quote-full hidden">"{{ displayContent }}"</span>
                        {% else %}
                            <span class="quote-text">"{{ displayContent }}"</span>
                        {% endif %}
                    </blockquote>

                    {% if shouldTruncate %}
                    <div class="text-center -mt-1 mb-3">
                        <button class="read-more-btn text-purple-600 hover:text-purple-800 text-sm font-medium transition-colors inline-flex items-center gap-1"
                                data-expanded="false">
                            <span class="read-more-text">Lihat Selengkapnya</span>
                            <svg class="w-4 h-4 transition-transform read-more-icon" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
                            </svg>
                        </button>
                    </div>
                    {% endif %}

                    {# Source Link (if exists) - Shown BEFORE category badge #}
                    {% if item.sourceLink %}
                    <div class="mt-3 mb-2">
                        <a href="{{ item.sourceLink }}"
                           target="_blank"
                           rel="noopener noreferrer"
                           class="inline-flex items-center gap-1.5 text-xs text-gray-500 hover:text-indigo-500 transition-colors group">
                            <span class="flex-shrink-0">üîó</span>
                            <span class="group-hover:underline truncate max-w-xs">Sumber: {{ item.sourceLink|replace({'https://': '', 'http://': ''})|split('/')[0] }}</span>
                            <svg class="w-3 h-3 flex-shrink-0 opacity-0 group-hover:opacity-100 transition-opacity" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"/>
                            </svg>
                        </a>
                    </div>
                    {% endif %}

                    <!-- Category Badge -->
                    <div class="mt-2">
                        <span class="inline-block bg-purple-100 text-purple-700 px-3 py-1 rounded-full text-xs font-medium">
                            {{ quote.category ?? 'Gaspul' }}
                        </span>
                    </div>
                </div>

                <!-- Stats Bar: Like & Comment Display -->
                <div class="px-6 pb-3">
                    <div class="flex items-center gap-3 text-sm flex-wrap">
                        {% if quote.totalLikes > 0 %}
                        <div class="flex items-center gap-1">
                            {# Thumbs up icon - 16px size #}
                            <span class="text-[16px] flex-shrink-0">üëçüèª</span>
                            <span class="text-gray-700 text-xs flex items-center gap-1 overflow-hidden">
                                {% if item.likedByUsers|length > 0 %}
                                    {# Show last user who liked (truncated to max 12 chars) #}
                                    {% set userName = item.likedByUsers[0] %}
                                    {% set truncatedName = userName|length > 14 ? userName|slice(0, 12) ~ '..' : userName %}
                                    <span class="font-medium hover:underline cursor-pointer truncate max-w-[100px]">{{ truncatedName }}</span>
                                    {% if quote.totalLikes > 1 %}
                                        <span class="text-gray-500 flex-shrink-0">+{{ quote.totalLikes - 1 }}</span>
                                    {% endif %}
                                {% else %}
                                    <span class="likes-count font-semibold">{{ quote.totalLikes }}</span> orang
                                {% endif %}
                            </span>
                        </div>
                        {% endif %}

                        {% if quote.totalComments > 0 %}
                        <div class="flex items-center gap-1 text-gray-600 cursor-pointer hover:text-purple-600 transition-colors comments-toggle text-xs md:text-sm"
                             data-showing="false">
                            <span class="comments-count font-semibold">{{ quote.totalComments }}</span>
                            <span>komentar</span>
                        </div>
                        {% endif %}
                    </div>
                </div>

                <!-- Action Buttons - Responsive Fix -->
                <div class="px-4 sm:px-6 pb-4">
                    <div class="flex items-center justify-around border-t border-gray-100 pt-3">
                        <!-- Like Button -->
                        <button class="like-btn flex items-center gap-1 sm:gap-2 px-2 sm:px-4 py-2 rounded-lg transition-all hover:bg-red-50 {{ hasLiked ? 'text-red-500' : 'text-gray-600' }}"
                                data-quote-id="{{ quote.id }}"
                                data-liked="{{ hasLiked ? 'true' : 'false' }}">
                            <span class="text-lg sm:text-xl">{{ hasLiked ? '‚ù§Ô∏è' : 'ü§ç' }}</span>
                            <span class="text-xs sm:text-sm font-medium hidden sm:inline">{{ hasLiked ? 'Disukai' : 'Suka' }}</span>
                        </button>

                        <!-- Comment Button -->
                        <button class="comments-toggle flex items-center gap-1 sm:gap-2 px-2 sm:px-4 py-2 rounded-lg transition-all hover:bg-purple-50 text-gray-600"
                                data-showing="false">
                            <span class="text-lg sm:text-xl">üí¨</span>
                            <span class="text-xs sm:text-sm font-medium comment-toggle-text hidden sm:inline">Lihat Komentar</span>
                        </button>

                        <!-- Share Button - Fixed Responsive -->
                        <button class="share-btn flex items-center gap-1 sm:gap-2 px-2 sm:px-4 py-2 rounded-lg transition-all hover:bg-blue-50 text-gray-600"
                                data-quote-id="{{ quote.id }}"
                                data-content="{{ quote.content }}"
                                data-author="{{ quote.author ?? 'Anonim' }}"
                                data-category="{{ quote.category ?? 'Gaspul' }}"
                                data-level="{{ item.authorLevel }}">
                            <span class="text-lg sm:text-xl">üîó</span>
                            <span class="text-xs sm:text-sm font-medium hidden sm:inline">Bagikan</span>
                        </button>
                    </div>
                </div>

                <!-- Comments Section (Hidden by default) - Compact Mobile Version -->
                <div class="comments-section hidden border-t border-gray-100">
                    <div class="p-3">
                        <!-- Comment Form - Compact -->
                        <div class="mb-3">
                            <div class="flex gap-2 items-start">
                                <!-- User Photo - Smaller -->
                                <div class="flex-shrink-0">
                                    <div class="w-8 h-8 rounded-full overflow-hidden bg-gradient-to-br from-purple-400 to-pink-400 flex items-center justify-center text-white font-bold text-xs">
                                        {% if app.user.photo %}
                                            <img src="{{ app.user.photo }}" alt="{{ app.user.nama }}" class="w-full h-full object-cover">
                                        {% else %}
                                            {{ app.user.nama|first|upper }}
                                        {% endif %}
                                    </div>
                                </div>
                                <!-- Comment Input - Compact -->
                                <div class="flex-1">
                                    <textarea
                                        class="comment-input w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-purple-500 resize-none text-xs"
                                        rows="2"
                                        placeholder="Tulis komentar..."
                                    ></textarea>
                                    <input type="hidden" class="comment-parent-id" value="">
                                    <div class="replying-to hidden mt-1.5 text-[10px] text-gray-600 bg-gray-50 px-2 py-1.5 rounded flex items-center justify-between">
                                        <span>Membalas: <span class="replying-to-name font-semibold"></span></span>
                                        <button class="cancel-reply text-red-500 hover:text-red-700 text-sm">‚úï</button>
                                    </div>
                                    <div class="flex justify-end mt-1.5">
                                        <button class="submit-comment-btn bg-purple-500 hover:bg-purple-600 text-white px-4 py-1.5 rounded-lg transition-colors font-medium text-xs"
                                                data-quote-id="{{ quote.id }}">
                                            Kirim
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Comments List - Compact -->
                        <div class="comments-list space-y-2">
                            <!-- Comments will be loaded here dynamically -->
                            <div class="text-center text-gray-500 text-xs py-3 empty-comments-msg">
                                Belum ada komentar. Jadilah yang pertama!
                            </div>
                        </div>
                    </div>
                </div>

            </div>
            {% endfor %}

            <!-- Load More Button (Optional for future pagination) -->
            <div class="text-center py-6">
                <p class="text-gray-500 text-sm">Anda sudah melihat semua quotes üéâ</p>
            </div>

            {% else %}
            <!-- Empty State (when no quotes yet) -->
            <div class="text-center py-12">
                <div class="text-6xl mb-4">üì≠</div>
                <h2 class="text-2xl font-bold text-gray-700 mb-2">Belum Ada Quotes</h2>
                <p class="text-gray-500">Jadilah yang pertama membagikan kata semangat!</p>
            </div>
            {% endif %}

        </div>

    </div>
</div>

<!-- Bottom Navigation -->
{% include 'components/bottom_nav.html.twig' with {'active_menu': 'ikhlas'} %}

<!-- Toast Notification Container -->
<div id="toastContainer" class="fixed bottom-24 right-4 z-50 space-y-2"></div>

<!-- Photo Modal - Fullscreen View dengan Navigasi (Z-INDEX TERTINGGI - FIXED!) -->
<div id="photoModal"
     class="hidden fixed inset-0 bg-black/85 backdrop-blur-sm flex items-center justify-center p-4"
     style="z-index: 99999 !important; backdrop-filter: blur(4px);"
     onclick="closePhotoModal()">

    <!-- Close Button -->
    <button class="absolute top-4 right-4 text-white hover:text-gray-300 transition-all bg-black/50 rounded-full p-3 hover:bg-black/70 active:scale-95"
            style="z-index: 100000 !important;"
            onclick="closePhotoModal(); event.stopPropagation();"
            title="Tutup (ESC)">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-7 w-7" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2.5">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
        </svg>
    </button>

    <!-- Navigation Buttons (Hidden untuk single photo) -->
    <div id="modalNavigation" class="hidden">
        <!-- Previous Button -->
        <button class="absolute left-4 top-1/2 transform -translate-y-1/2 text-white bg-black/50 rounded-full p-3 hover:bg-black/70 transition-all hover:scale-110 active:scale-95"
                style="z-index: 100000 !important;"
                onclick="navigateModalPhoto(-1); event.stopPropagation();"
                title="Foto sebelumnya">
            <svg class="w-7 h-7" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M15 19l-7-7 7-7"/>
            </svg>
        </button>

        <!-- Next Button -->
        <button class="absolute right-4 top-1/2 transform -translate-y-1/2 text-white bg-black/50 rounded-full p-3 hover:bg-black/70 transition-all hover:scale-110 active:scale-95"
                style="z-index: 100000 !important;"
                onclick="navigateModalPhoto(1); event.stopPropagation();"
                title="Foto berikutnya">
            <svg class="w-7 h-7" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M9 5l7 7-7 7"/>
            </svg>
        </button>
    </div>

    <!-- Image Container -->
    <div class="relative max-w-full max-h-full flex items-center justify-center" onclick="event.stopPropagation()">
        <img id="photoModalImg"
             src=""
             alt="Preview Foto Inspirasi"
             class="max-w-[95vw] max-h-[95vh] w-auto h-auto object-contain rounded-lg shadow-2xl"
             style="background: transparent; display: block;">
    </div>

    <!-- Photo Counter (Hidden untuk single photo) -->
    <div id="modalCounter" class="hidden absolute top-4 left-4 text-white text-sm bg-black/60 px-3 py-1.5 rounded-full backdrop-blur-sm">
        <span id="modalCurrentIndex">1</span> / <span id="modalTotalPhotos">1</span>
    </div>

    <!-- Mobile Hint -->
    <div class="absolute bottom-6 left-1/2 transform -translate-x-1/2 text-white text-xs bg-black/60 px-4 py-2 rounded-full md:hidden">
        üëÜ Ketuk di luar gambar untuk menutup
    </div>
</div>

{% endblock %}

{% block javascripts %}
<!-- Level Up Flash Message Handler -->
{% for message in app.flashes('level_up') %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(function() {
        Swal.fire({
            title: 'üéâ Selamat! Level Up!',
            html: `
                <div class="text-center py-4">
                    <div class="text-7xl mb-4 animate-bounce">{{ message.badge.icon }}</div>
                    <div class="text-2xl font-bold text-purple-600 mb-2">Level {{ message.level }}</div>
                    <div class="text-lg text-gray-700 mb-3">{{ message.badge.name }}</div>
                    <div class="mt-4 text-sm text-gray-500">Bonus login harian! Terus tingkatkan interaksi Anda!</div>
                </div>
            `,
            icon: 'success',
            confirmButtonText: 'Luar Biasa!',
            confirmButtonColor: '#8B5CF6',
            background: '#ffffff',
            backdrop: `
                rgba(139, 92, 246, 0.2)
                left top
                no-repeat
            `,
            customClass: {
                popup: 'rounded-2xl shadow-2xl',
                confirmButton: 'rounded-lg px-8 py-3 font-bold'
            }
        });
    }, 1000);
});
</script>
{% endfor %}

<script>
// IKHLAS - Feed Style Quote System
(function() {
    'use strict';

    // Initialize all cards
    function init() {
        setupCreateQuote();
        setupReadMore();
        setupLikeButtons();
        setupSaveButtons();
        setupCommentsToggle();
        setupCommentSubmit();
        setupShareButtons();
        setupThreeDotsMenu();
        setupBottomNavAutoHide();
        // Note: View tracking removed - using like count display instead
        // Note: Link extraction now handled server-side in Controller
    }

    // Setup Bottom Navigation Auto Hide/Show on Scroll
    function setupBottomNavAutoHide() {
        const bottomNav = document.querySelector('.fixed.bottom-0');
        if (!bottomNav) return;

        let lastScrollTop = 0;
        let scrollTimeout;

        window.addEventListener('scroll', function() {
            clearTimeout(scrollTimeout);

            scrollTimeout = setTimeout(function() {
                const scrollTop = window.pageYOffset || document.documentElement.scrollTop;

                if (scrollTop > lastScrollTop && scrollTop > 100) {
                    // Scrolling DOWN - Hide nav
                    bottomNav.style.transform = 'translateY(100%)';
                    bottomNav.style.transition = 'transform 0.3s ease-in-out';
                } else {
                    // Scrolling UP - Show nav
                    bottomNav.style.transform = 'translateY(0)';
                    bottomNav.style.transition = 'transform 0.3s ease-in-out';
                }

                lastScrollTop = scrollTop <= 0 ? 0 : scrollTop;
            }, 50); // Debounce 50ms
        }, false);
    }

    // Setup Read More Toggle
    function setupReadMore() {
        document.querySelectorAll('.read-more-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const card = this.closest('.quote-card');
                const quoteText = card.querySelector('.quote-text');
                const quoteFull = card.querySelector('.quote-full');
                const isExpanded = this.dataset.expanded === 'true';
                const readMoreText = this.querySelector('.read-more-text');
                const readMoreIcon = this.querySelector('.read-more-icon');

                if (!isExpanded) {
                    // Expand - show full content
                    quoteText.classList.add('hidden');
                    quoteFull.classList.remove('hidden');
                    readMoreText.textContent = 'Lihat Lebih Sedikit';
                    readMoreIcon.style.transform = 'rotate(180deg)';
                    this.dataset.expanded = 'true';
                } else {
                    // Collapse - show truncated content
                    quoteText.classList.remove('hidden');
                    quoteFull.classList.add('hidden');
                    readMoreText.textContent = 'Lihat Selengkapnya';
                    readMoreIcon.style.transform = 'rotate(0deg)';
                    this.dataset.expanded = 'false';

                    // Scroll back to card top smoothly
                    card.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
                }
            });
        });
    }

    // ===============================================
    // Photo Upload Functions
    // ===============================================

    // Global variable untuk menyimpan foto yang di-upload
    window.uploadedPhotos = [];
    const MAX_PHOTOS = 2;
    const MAX_FILE_SIZE = 1024 * 1024; // 1MB

    /**
     * Handle foto upload dari kamera atau galeri
     */
    window.handlePhotoUpload = function(event) {
        const files = event.target.files;

        if (files.length === 0) return;

        // Cek berapa slot yang tersisa
        const remainingSlots = MAX_PHOTOS - window.uploadedPhotos.length;

        if (remainingSlots <= 0) {
            showToast(`‚ùå Maksimal ${MAX_PHOTOS} foto saja`, 'error');
            event.target.value = '';
            return;
        }

        // Batasi jumlah file yang akan diproses
        const filesToProcess = Array.from(files).slice(0, remainingSlots);

        if (files.length > remainingSlots) {
            showToast(`‚ö†Ô∏è Hanya ${remainingSlots} foto yang akan diupload (maksimal ${MAX_PHOTOS} foto total)`, 'warning');
        }

        let validFilesCount = 0;

        filesToProcess.forEach((file, index) => {
            // Validasi tipe file - hanya image/*
            if (!file.type.startsWith('image/')) {
                showToast('‚ùå Hanya file gambar yang diperbolehkan', 'error');
                return;
            }

            // Validasi ukuran file
            if (file.size > MAX_FILE_SIZE) {
                showToast(`‚ùå ${file.name} terlalu besar (max 1MB)`, 'error');
                return;
            }

            validFilesCount++;

            // Baca file dan tampilkan preview
            const reader = new FileReader();
            reader.onload = function(e) {
                // Double check sebelum push
                if (window.uploadedPhotos.length < MAX_PHOTOS) {
                    window.uploadedPhotos.push({
                        file: file,
                        preview: e.target.result,
                        id: Date.now() + Math.random() + index
                    });
                    renderPhotoPreview();
                }
            };
            reader.readAsDataURL(file);
        });

        if (validFilesCount > 0) {
            showToast(`‚úÖ ${validFilesCount} foto ditambahkan`, 'success');
        }

        event.target.value = ''; // Reset input
    };

    /**
     * Render preview foto
     */
    function renderPhotoPreview() {
        const container = document.getElementById('photoPreviewContainer');
        const photoInfo = document.getElementById('photoInfo');
        const cameraInput = document.getElementById('cameraInput');
        const galleryInput = document.getElementById('galleryInput');
        const uploadButtons = document.querySelector('.flex.items-center.gap-3'); // Container tombol upload

        if (!container) return;

        // Jika tidak ada foto, sembunyikan preview
        if (window.uploadedPhotos.length === 0) {
            container.classList.add('hidden');
            if (photoInfo) photoInfo.classList.add('hidden');
            if (uploadButtons) {
                uploadButtons.style.opacity = '1';
                uploadButtons.style.pointerEvents = 'auto';
            }
            return;
        }

        // Tampilkan preview
        container.classList.remove('hidden');
        if (photoInfo) {
            photoInfo.classList.remove('hidden');
            // Update info text dengan jumlah foto
            const photoCountText = photoInfo.querySelector('span') || photoInfo;
            photoInfo.innerHTML = `
                <svg xmlns="http://www.w3.org/2000/svg" class="h-3 w-3" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                ${window.uploadedPhotos.length}/${MAX_PHOTOS} foto dipilih ‚Ä¢ Max 1MB per foto (JPG/PNG)
            `;
        }

        // Hide/disable upload buttons jika sudah mencapai maksimal
        if (window.uploadedPhotos.length >= MAX_PHOTOS) {
            if (uploadButtons) {
                uploadButtons.style.opacity = '0.4';
                uploadButtons.style.pointerEvents = 'none';
            }
            if (cameraInput) cameraInput.disabled = true;
            if (galleryInput) galleryInput.disabled = true;
        } else {
            if (uploadButtons) {
                uploadButtons.style.opacity = '1';
                uploadButtons.style.pointerEvents = 'auto';
            }
            if (cameraInput) cameraInput.disabled = false;
            if (galleryInput) galleryInput.disabled = false;
        }

        // Render preview dengan tombol hapus
        container.innerHTML = window.uploadedPhotos.map((photo, index) => `
            <div class="relative rounded-lg overflow-hidden bg-gray-100 shadow-md hover:shadow-lg transition-shadow" style="aspect-ratio: 1/1;">
                <img src="${photo.preview}"
                     alt="Preview ${index + 1}"
                     class="w-full h-full object-cover"
                     loading="lazy">
                <button onclick="deletePhoto(${photo.id})"
                        type="button"
                        class="absolute top-2 right-2 bg-red-500 hover:bg-red-600 active:bg-red-700 text-white rounded-full w-8 h-8 flex items-center justify-center transition-all shadow-lg hover:scale-110 active:scale-95"
                        title="Hapus foto">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" stroke-width="2.5">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
                <div class="absolute bottom-2 left-2 bg-black/60 text-white text-xs px-2 py-1 rounded-full backdrop-blur-sm">
                    Foto ${index + 1}
                </div>
            </div>
        `).join('');
    }

    /**
     * Hapus foto dari preview
     */
    window.deletePhoto = function(photoId) {
        window.uploadedPhotos = window.uploadedPhotos.filter(photo => photo.id !== photoId);
        renderPhotoPreview();
    };

    // Setup Create Quote
    function setupCreateQuote() {
        const submitBtn = document.getElementById('submitQuoteBtn');
        const quoteInput = document.getElementById('createQuoteInput');
        const categorySelect = document.getElementById('createQuoteCategory');
        const charCounter = document.getElementById('charCounter');

        console.log('Setup Create Quote - Elements:', {
            submitBtn: !!submitBtn,
            quoteInput: !!quoteInput,
            categorySelect: !!categorySelect,
            charCounter: !!charCounter
        });

        if (!submitBtn || !quoteInput || !categorySelect) {
            console.error('Missing elements for Create Quote form!');
            return;
        }

        // Character counter
        quoteInput.addEventListener('input', function() {
            const length = this.value.length;
            if (charCounter) {
                charCounter.textContent = `${length} / 500 karakter`;

                // Change color based on length
                if (length < 10) {
                    charCounter.className = 'text-xs text-gray-500';
                } else if (length >= 10 && length < 450) {
                    charCounter.className = 'text-xs text-green-600';
                } else if (length >= 450 && length < 500) {
                    charCounter.className = 'text-xs text-yellow-600';
                } else {
                    charCounter.className = 'text-xs text-red-600';
                }
            }
        });

        submitBtn.addEventListener('click', async function() {
            console.log('Submit button clicked!');
            const content = quoteInput.value.trim();
            const category = categorySelect.value;

            console.log('Quote data:', { content, category, contentLength: content.length });

            if (!content) {
                console.log('Validation failed: empty content');
                showToast('‚ùå Kata semangat tidak boleh kosong', 'error');
                quoteInput.focus();
                return;
            }

            if (content.length < 10) {
                showToast('‚ùå Kata semangat minimal 10 karakter', 'error');
                quoteInput.focus();
                return;
            }

            if (content.length > 500) {
                showToast('‚ùå Kata semangat maksimal 500 karakter', 'error');
                quoteInput.focus();
                return;
            }

            // Disable button
            submitBtn.disabled = true;
            submitBtn.textContent = 'Membagikan... ‚è≥';

            try {
                // Cek apakah ada foto yang di-upload
                const hasPhotos = window.uploadedPhotos && window.uploadedPhotos.length > 0;

                let response, data;

                if (hasPhotos) {
                    // Gunakan FormData untuk upload dengan foto
                    const formData = new FormData();
                    formData.append('quote', content);
                    formData.append('category', category);

                    // Tambahkan foto ke FormData
                    window.uploadedPhotos.forEach((photo) => {
                        formData.append('photos[]', photo.file);
                    });

                    response = await fetch('/ikhlas/api/create-with-photos', {
                        method: 'POST',
                        body: formData // Tidak perlu set Content-Type, browser akan set otomatis
                    });
                } else {
                    // Gunakan JSON untuk post tanpa foto (lebih cepat)
                    response = await fetch('/ikhlas/api/create-quote', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            content: content,
                            category: category
                        })
                    });
                }

                data = await response.json();

                if (data.success) {
                    showToast(data.message, 'success');

                    // Clear input
                    quoteInput.value = '';
                    categorySelect.value = 'Gaspul';

                    // Reset foto
                    if (window.uploadedPhotos) {
                        window.uploadedPhotos = [];
                        renderPhotoPreview();
                    }

                    // Check for level up (new XP system)
                    if (data.level_up && data.level_info) {
                        setTimeout(() => showLevelUpNotification(data.level_info), 800);
                    }
                    // Fallback to old gamification system
                    else if (data.level_up && data.level_up.level_up) {
                        setTimeout(() => showLevelUpNotification(data.level_up), 800);
                    }

                    // Reload page to show new quote
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                } else {
                    showToast('‚ùå ' + data.message, 'error');
                }
            } catch (error) {
                console.error('Error creating quote:', error);
                showToast('‚ùå Terjadi kesalahan', 'error');
            } finally {
                submitBtn.disabled = false;
                submitBtn.textContent = 'Bagikan Semangat üöÄ';
            }
        });

        // Allow Enter + Ctrl/Cmd to submit
        quoteInput.addEventListener('keydown', function(e) {
            if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
                submitBtn.click();
            }
        });
    }

    // Setup Like Buttons
    function setupLikeButtons() {
        document.querySelectorAll('.like-btn').forEach(btn => {
            btn.addEventListener('click', async function() {
                const quoteId = parseInt(this.dataset.quoteId);
                const card = this.closest('.quote-card');

                try {
                    const response = await fetch('/ikhlas/api/interact', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            quoteId: quoteId,
                            action: 'like'
                        })
                    });

                    const data = await response.json();

                    if (data.success) {
                        // Update button state
                        const isLiked = data.status;
                        this.dataset.liked = isLiked ? 'true' : 'false';

                        if (isLiked) {
                            this.classList.add('text-red-500');
                            this.classList.remove('text-gray-600');
                            this.querySelector('span:first-child').textContent = '‚ù§Ô∏è';
                            this.querySelector('span:last-child').textContent = 'Disukai';
                        } else {
                            this.classList.remove('text-red-500');
                            this.classList.add('text-gray-600');
                            this.querySelector('span:first-child').textContent = 'ü§ç';
                            this.querySelector('span:last-child').textContent = 'Suka';
                        }

                        // Update like count
                        const likesCount = card.querySelector('.likes-count');
                        if (likesCount && data.totalLikes !== undefined) {
                            likesCount.textContent = data.totalLikes;
                        }

                        showToast(data.message, 'success');

                        // Check for level up (new XP system)
                        if (data.level_up && data.level_up.level_up) {
                            setTimeout(() => showLevelUpNotification(data.level_up), 800);
                        }
                    } else {
                        showToast('‚ùå ' + data.message, 'error');
                    }
                } catch (error) {
                    console.error('Error liking quote:', error);
                    showToast('‚ùå Terjadi kesalahan', 'error');
                }
            });
        });
    }

    // Setup Save Buttons
    function setupSaveButtons() {
        document.querySelectorAll('.save-btn').forEach(btn => {
            btn.addEventListener('click', async function() {
                const quoteId = parseInt(this.dataset.quoteId);

                try {
                    const response = await fetch('/ikhlas/api/interact', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({
                            quoteId: quoteId,
                            action: 'save'
                        })
                    });

                    const data = await response.json();

                    if (data.success) {
                        // Update button state
                        const isSaved = data.status;
                        this.dataset.saved = isSaved ? 'true' : 'false';

                        if (isSaved) {
                            this.classList.add('text-yellow-500');
                            this.classList.remove('text-gray-400');
                            this.querySelector('span').textContent = 'üìå';
                        } else {
                            this.classList.remove('text-yellow-500');
                            this.classList.add('text-gray-400');
                            this.querySelector('span').textContent = 'üîñ';
                        }

                        showToast(data.message, 'success');

                        // Check for level up
                        if (data.level_up && data.level_up.level_up) {
                            setTimeout(() => showLevelUpNotification(data.level_up), 800);
                        }
                    } else {
                        showToast('‚ùå ' + data.message, 'error');
                    }
                } catch (error) {
                    console.error('Error saving quote:', error);
                    showToast('‚ùå Terjadi kesalahan', 'error');
                }
            });
        });
    }

    // Setup Comments Toggle
    function setupCommentsToggle() {
        document.querySelectorAll('.comments-toggle').forEach(btn => {
            btn.addEventListener('click', function() {
                const card = this.closest('.quote-card');
                const commentsSection = card.querySelector('.comments-section');
                const quoteId = card.dataset.quoteId;
                const isShowing = this.dataset.showing === 'true';

                // Update all toggle buttons in the same card
                const allToggleBtns = card.querySelectorAll('.comments-toggle');
                const toggleText = card.querySelector('.comment-toggle-text');

                if (!isShowing) {
                    // Show comments
                    commentsSection.classList.remove('hidden');
                    commentsSection.style.animation = 'slideDown 0.3s ease-out';

                    // Update button states
                    allToggleBtns.forEach(btn => btn.dataset.showing = 'true');
                    if (toggleText) {
                        toggleText.textContent = 'Sembunyikan';
                    }

                    // Load comments
                    loadComments(card, quoteId);
                } else {
                    // Hide comments
                    commentsSection.style.animation = 'slideUp 0.3s ease-out';
                    setTimeout(() => {
                        commentsSection.classList.add('hidden');
                    }, 300);

                    // Update button states
                    allToggleBtns.forEach(btn => btn.dataset.showing = 'false');
                    if (toggleText) {
                        toggleText.textContent = 'Lihat Komentar';
                    }
                }
            });
        });
    }

    // Load Comments
    async function loadComments(card, quoteId) {
        const commentsList = card.querySelector('.comments-list');
        const emptyMsg = card.querySelector('.empty-comments-msg');

        try {
            const response = await fetch(`/ikhlas/api/quotes/${quoteId}/comments`);
            const data = await response.json();

            if (data.success) {
                // Store current user ID for delete permission check
                card.dataset.currentUserId = data.current_user_id || 0;

                if (data.comments.length === 0) {
                    if (emptyMsg) emptyMsg.classList.remove('hidden');
                    if (commentsList) commentsList.innerHTML = '';
                } else {
                    if (emptyMsg) emptyMsg.classList.add('hidden');
                    if (commentsList) {
                        commentsList.innerHTML = data.comments.map(comment => renderComment(comment, card, false)).join('');
                    }
                }
            }
        } catch (error) {
            console.error('Error loading comments:', error);
            if (commentsList) {
                commentsList.innerHTML = '<div class="text-center text-red-500 text-xs py-2">‚ùå Gagal memuat komentar</div>';
            }
        }
    }

    // Delete Comment
    async function deleteComment(btn, commentId) {
        const card = btn.closest('.quote-card');
        const quoteId = card.dataset.quoteId;

        // Confirm delete
        const confirmed = await Swal.fire({
            title: 'Hapus Komentar?',
            text: 'Komentar yang dihapus tidak dapat dikembalikan',
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#EF4444',
            cancelButtonColor: '#6B7280',
            confirmButtonText: 'Ya, Hapus',
            cancelButtonText: 'Batal',
            customClass: {
                popup: 'rounded-2xl',
                confirmButton: 'rounded-lg px-6 py-2.5',
                cancelButton: 'rounded-lg px-6 py-2.5'
            }
        });

        if (!confirmed.isConfirmed) return;

        try {
            btn.disabled = true;
            btn.style.opacity = '0.5';

            const response = await fetch(`/ikhlas/api/comments/${commentId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                    'X-Requested-With': 'XMLHttpRequest'
                }
            });

            const result = await response.json();

            if (result.success) {
                showToast(result.message || 'üóëÔ∏è Komentar berhasil dihapus', 'success');

                // Update comment counter
                const commentsCount = card.querySelectorAll('.comments-count');
                commentsCount.forEach(el => {
                    el.textContent = result.totalComments || 0;
                });

                // Reload comments
                await loadComments(card, quoteId);
            } else {
                showToast(result.message || '‚ùå Gagal menghapus komentar', 'error');
                btn.disabled = false;
                btn.style.opacity = '1';
            }
        } catch (error) {
            console.error('Delete comment error:', error);
            showToast('‚ùå Terjadi kesalahan saat menghapus komentar', 'error');
            btn.disabled = false;
            btn.style.opacity = '1';
        }
    }

    // Make deleteComment global so it can be called from onclick
    window.deleteComment = deleteComment;

    // Render Comment - Compact & Mobile Optimized
    function renderComment(comment, card, isReply = false) {
        if (!comment || !comment.user) {
            console.error('Invalid comment data:', comment);
            return '';
        }

        const photo = comment.user.photo || '';
        const initial = (comment.user.name || 'U').charAt(0).toUpperCase();
        const userName = comment.user.name || 'User';
        const commentText = comment.comment || '';
        const timeAgo = comment.time_ago || '';

        // Build replies HTML first
        let repliesHtml = '';
        if (comment.replies && comment.replies.length > 0) {
            const validReplies = comment.replies.filter(r => r && r.user);
            if (validReplies.length > 0) {
                repliesHtml = `
                    <div class="replies-container ml-4 md:ml-6 mt-2 space-y-2 border-l-2 border-purple-200 pl-2 md:pl-3">
                        ${validReplies.map(reply => renderComment(reply, card, true)).join('')}
                    </div>
                `;
            }
        }

        const bgClass = isReply ? 'bg-white' : 'bg-gray-50';
        const shadowClass = isReply ? 'shadow-sm' : '';

        return `
            <div class="comment-item ${isReply ? 'mb-2' : 'mb-3'}">
                <div class="${bgClass} rounded-lg p-2.5 md:p-3 border border-gray-200 ${shadowClass}">
                    <div class="flex items-start gap-2">
                        <div class="flex-shrink-0">
                            <div class="w-8 h-8 rounded-full overflow-hidden bg-gradient-to-br from-purple-400 to-pink-400 flex items-center justify-center text-white font-bold text-xs">
                                ${photo && photo !== '/images/default-user.png'
                                    ? `<img src="${photo}" alt="${escapeHtml(userName)}" class="w-full h-full object-cover">`
                                    : initial}
                            </div>
                        </div>
                        <div class="flex-1 min-w-0">
                            <div class="flex items-center justify-between gap-2">
                                <div class="font-semibold text-gray-800 text-sm mb-1">${escapeHtml(userName)}</div>
                                ${parseInt(card.dataset.currentUserId) === parseInt(comment.user.id) ? `
                                    <button onclick="deleteComment(this, ${comment.id}); return false;"
                                            class="text-red-400 hover:text-red-600 transition-colors flex-shrink-0"
                                            title="Hapus komentar">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                        </svg>
                                    </button>
                                ` : ''}
                            </div>
                            <p class="text-gray-700 text-[14px] mb-1.5 break-words leading-relaxed">${escapeHtml(commentText)}</p>
                            <div class="flex items-center gap-2 text-[10px] text-gray-400">
                                <span class="font-normal">${escapeHtml(timeAgo)}</span>
                                <span class="text-gray-300">‚Ä¢</span>
                                <button onclick="replyToComment(this, ${comment.id}, '${escapeHtml(userName).replace(/'/g, "\\'")}'); return false;"
                                        class="hover:text-purple-600 font-medium transition-colors flex items-center gap-1">
                                    <span class="text-[10px]">‚Ü©Ô∏è</span>
                                    <span>Balas</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                ${repliesHtml}
            </div>
        `;
    }

    // Reply to Comment
    window.replyToComment = function(btn, commentId, userName) {
        const card = btn.closest('.quote-card');
        const parentIdInput = card.querySelector('.comment-parent-id');
        const replyingTo = card.querySelector('.replying-to');
        const replyingToName = card.querySelector('.replying-to-name');
        const commentInput = card.querySelector('.comment-input');

        parentIdInput.value = commentId;
        replyingToName.textContent = userName;
        replyingTo.classList.remove('hidden');

        commentInput.focus();
        commentInput.scrollIntoView({ behavior: 'smooth', block: 'center' });
    };

    // Cancel Reply
    document.addEventListener('click', function(e) {
        if (e.target.classList.contains('cancel-reply')) {
            const card = e.target.closest('.quote-card');
            const parentIdInput = card.querySelector('.comment-parent-id');
            const replyingTo = card.querySelector('.replying-to');

            parentIdInput.value = '';
            replyingTo.classList.add('hidden');
        }
    });

    // Setup Comment Submit
    function setupCommentSubmit() {
        document.querySelectorAll('.submit-comment-btn').forEach(btn => {
            btn.addEventListener('click', async function() {
                const card = this.closest('.quote-card');
                const quoteId = parseInt(this.dataset.quoteId);
                const commentInput = card.querySelector('.comment-input');
                const parentIdInput = card.querySelector('.comment-parent-id');
                const comment = commentInput.value.trim();

                if (!comment) {
                    showToast('‚ùå Komentar tidak boleh kosong', 'error');
                    return;
                }

                this.disabled = true;
                this.textContent = 'Mengirim...';

                try {
                    const requestBody = { comment: comment };
                    if (parentIdInput.value) {
                        requestBody.parent_id = parseInt(parentIdInput.value);
                    }

                    const response = await fetch(`/ikhlas/api/quotes/${quoteId}/comment`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify(requestBody)
                    });

                    const data = await response.json();

                    if (data.success) {
                        showToast(data.message, 'success');
                        commentInput.value = '';

                        // Clear reply state
                        const isReply = parentIdInput.value !== '';
                        parentIdInput.value = '';
                        card.querySelector('.replying-to').classList.add('hidden');

                        // Update comment count
                        const commentsCount = card.querySelectorAll('.comments-count');
                        if (commentsCount && data.totalComments !== undefined) {
                            commentsCount.forEach(el => {
                                el.textContent = data.totalComments;
                            });
                        }

                        // Ensure comments section is visible
                        const commentsSection = card.querySelector('.comments-section');
                        const allToggleBtns = card.querySelectorAll('.comments-toggle');
                        const toggleText = card.querySelector('.comment-toggle-text');

                        if (commentsSection && commentsSection.classList.contains('hidden')) {
                            commentsSection.classList.remove('hidden');
                            allToggleBtns.forEach(btn => btn.dataset.showing = 'true');
                            if (toggleText) toggleText.textContent = 'Sembunyikan';
                        }

                        // Add comment to DOM immediately for real-time feel
                        const commentsList = card.querySelector('.comments-list');
                        const emptyMsg = card.querySelector('.empty-comments-msg');

                        if (data.comment) {
                            // Hide empty message
                            if (emptyMsg) emptyMsg.classList.add('hidden');

                            // If it's a reply, reload to show nested properly
                            // Otherwise, prepend the new comment
                            if (isReply) {
                                loadComments(card, quoteId);
                            } else {
                                if (commentsList) {
                                    const newCommentHtml = renderComment(data.comment, card, false);
                                    commentsList.insertAdjacentHTML('afterbegin', newCommentHtml);

                                    // Add animation to new comment
                                    const firstComment = commentsList.firstElementChild;
                                    if (firstComment) {
                                        firstComment.style.animation = 'slideDown 0.3s ease-out';
                                    }
                                }
                            }
                        }

                        // Check for level up
                        if (data.level_up || (data.level_info && data.level_info.new_level)) {
                            const levelUpData = data.level_info || data.level_up;
                            setTimeout(() => showLevelUpNotification(levelUpData), 800);
                        }
                    } else {
                        showToast('‚ùå ' + data.message, 'error');
                    }
                } catch (error) {
                    console.error('Error submitting comment:', error);
                    showToast('‚ùå Terjadi kesalahan', 'error');
                } finally {
                    this.disabled = false;
                    this.textContent = 'Kirim';
                }
            });
        });
    }

    // Setup Share Buttons - Using Native Share API
    function setupShareButtons() {
        // Level badge icons (Garuda Pancasila theme)
        const levelBadges = {
            1: '‚≠ê', // Bintang Emas
            2: 'üêÇ', // Banteng
            3: '‚õìÔ∏è', // Rantai
            4: 'üå≥', // Pohon Beringin
            5: 'üåæ'  // Padi & Kapas
        };

        document.querySelectorAll('.share-btn').forEach(btn => {
            btn.addEventListener('click', async function() {
                const content = this.dataset.content;
                const author = this.dataset.author;
                const category = this.dataset.category || 'Gaspul';
                const level = parseInt(this.dataset.level) || 1;
                const badge = levelBadges[level] || '‚≠ê';

                // Format share text
                const shareText = `${category}:\n${content}\n\n- ${author}\n${badge} Dibagikan dari GEMBIRA`;
                const shareUrl = window.location.origin + '/ikhlas';

                // Detect mobile device
                const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);

                // On mobile, try native share first
                if (isMobile && navigator.share && navigator.canShare) {
                    try {
                        const shareData = {
                            title: 'Inspirasi dari GEMBIRA',
                            text: shareText,
                            url: shareUrl
                        };

                        // Check if can share this data
                        if (navigator.canShare(shareData)) {
                            await navigator.share(shareData);
                            showToast('‚úÖ Berhasil dibagikan!', 'success');
                            return;
                        }
                    } catch (error) {
                        // User cancelled or error - try fallback
                        if (error.name !== 'AbortError') {
                            console.log('Native share failed, using fallback');
                        } else {
                            // User cancelled - don't show fallback
                            return;
                        }
                    }
                }

                // Fallback: Show custom share menu
                showCustomShareMenu(shareText, shareUrl);
            });
        });

        // Show custom share menu with popular apps
        function showCustomShareMenu(text, url) {
            // Limit text length for URL compatibility (max 500 chars)
            const maxLength = 400;
            let shortText = text;
            if (text.length > maxLength) {
                shortText = text.substring(0, maxLength) + '...';
            }

            const encodedText = encodeURIComponent(shortText);
            const encodedUrl = encodeURIComponent(url);
            const fullText = encodeURIComponent(shortText + '\n\n' + url);

            // Detect if mobile device
            const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);

            // Create share options with proper data
            const shareOptions = [
                {
                    name: 'WhatsApp',
                    icon: 'üí¨',
                    url: `https://wa.me/?text=${fullText}`,
                    shareData: { text: shortText, url: url },
                    color: '#25D366'
                },
                {
                    name: 'Telegram',
                    icon: '‚úàÔ∏è',
                    url: `https://telegram.me/share/url?url=${encodedUrl}&text=${encodedText}`,
                    shareData: { text: shortText, url: url },
                    color: '#0088cc'
                },
                {
                    name: 'Facebook',
                    icon: 'üìò',
                    url: `https://www.facebook.com/sharer/sharer.php?u=${encodedUrl}`,
                    shareData: { url: url },
                    color: '#1877f2'
                },
                {
                    name: 'Copy Link',
                    icon: 'üìã',
                    action: 'copy',
                    shareData: { text: text, url: url },
                    color: '#6b7280'
                }
            ];

            // Show SweetAlert with share options
            const buttonsHtml = shareOptions.map((option, index) => `
                <button data-share-index="${index}"
                        class="share-option-btn"
                        style="background: ${option.color}; color: white; padding: 12px 20px; border: none; border-radius: 8px; margin: 5px; min-width: 120px; cursor: pointer; display: inline-flex; align-items: center; justify-content: center; gap: 8px; font-size: 14px; transition: transform 0.2s; box-shadow: 0 2px 4px rgba(0,0,0,0.2);"
                        onmouseover="this.style.transform='scale(1.05)'"
                        onmouseout="this.style.transform='scale(1)'">
                    <span style="font-size: 20px;">${option.icon}</span>
                    <span>${option.name}</span>
                </button>
            `).join('');

            Swal.fire({
                title: 'Bagikan Quote',
                html: `<div style="padding: 20px;">${buttonsHtml}</div>`,
                showConfirmButton: false,
                showCloseButton: true,
                width: '90%',
                customClass: {
                    popup: 'share-menu-popup'
                },
                didOpen: () => {
                    // Add click handlers after modal opens
                    const buttons = document.querySelectorAll('.share-option-btn');
                    buttons.forEach((btn, index) => {
                        btn.addEventListener('click', () => {
                            const option = shareOptions[index];
                            handleShareOptionClick(option, text, url);
                        });
                    });
                }
            });
        }

        // Handle share option click
        function handleShareOptionClick(option, text, pageUrl) {
            if (option.action === 'copy') {
                // Copy to clipboard
                const fullText = text + '\n\n' + pageUrl;
                if (navigator.clipboard && navigator.clipboard.writeText) {
                    navigator.clipboard.writeText(fullText).then(() => {
                        Swal.close();
                        showToast('‚úÖ Link berhasil disalin!', 'success');
                    }).catch(() => {
                        fallbackCopyToClipboard(fullText);
                    });
                } else {
                    fallbackCopyToClipboard(fullText);
                }
            } else {
                // Open share URL - direct window.open untuk better compatibility
                Swal.close();

                // Direct window.open - lebih reliable di mobile
                try {
                    const opened = window.open(option.url, '_blank', 'noopener,noreferrer');
                    showToast('üîó Membuka aplikasi...', 'info');
                } catch (error) {
                    // Fallback dengan location.href jika window.open gagal
                    console.log('Window.open failed, using location.href');
                    window.location.href = option.url;
                }
            }
        }

        // Fallback copy to clipboard
        function fallbackCopyToClipboard(text) {
            const textarea = document.createElement('textarea');
            textarea.value = text;
            textarea.style.position = 'fixed';
            textarea.style.opacity = '0';
            document.body.appendChild(textarea);
            textarea.focus();
            textarea.select();
            try {
                document.execCommand('copy');
                Swal.close();
                showToast('‚úÖ Link berhasil disalin!', 'success');
            } catch (err) {
                showToast('‚ùå Gagal menyalin link', 'error');
            }
            document.body.removeChild(textarea);
        }
    }

    // Show Level Up Notification
    function showLevelUpNotification(levelUpInfo) {
        // Support both old gamification system and new XP system
        const isNewXpSystem = levelUpInfo.badge && levelUpInfo.title;
        const badge = isNewXpSystem ? levelUpInfo.badge : (levelUpInfo.badge_info ? levelUpInfo.badge_info.icon : 'üåü');
        const level = levelUpInfo.new_level;
        const title = isNewXpSystem ? levelUpInfo.title : (levelUpInfo.badge_info ? levelUpInfo.badge_info.name : 'Level Up!');
        const totalDisplay = isNewXpSystem ?
            `Total XP: <span class="font-bold text-purple-600">${levelUpInfo.total_xp || 0}</span>` :
            `Total Poin: <span class="font-bold text-purple-600">${levelUpInfo.new_total || 0}</span>`;

        Swal.fire({
            title: 'üéâ Selamat! Level Up!',
            html: `
                <div class="text-center py-6">
                    <div class="text-8xl mb-6 animate-bounce">${badge}</div>
                    <div class="text-3xl font-bold bg-gradient-to-r from-purple-600 to-pink-600 bg-clip-text text-transparent mb-3">
                        Level ${level}
                    </div>
                    <div class="text-xl text-gray-700 font-medium mb-4">${title}</div>
                    <div class="bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg px-6 py-3 mb-4">
                        <div class="text-gray-600">${totalDisplay}</div>
                    </div>
                    <div class="text-sm text-gray-500">
                        ${isNewXpSystem ? 'Terus tingkatkan XP Anda untuk naik level!' : 'Terus tingkatkan interaksi Anda!'}
                    </div>
                </div>
            `,
            icon: 'success',
            confirmButtonText: 'Luar Biasa! üéä',
            confirmButtonColor: '#8B5CF6',
            background: '#ffffff',
            backdrop: `
                rgba(139, 92, 246, 0.3)
                left top
                no-repeat
            `,
            customClass: {
                popup: 'rounded-2xl shadow-2xl border-4 border-purple-200',
                confirmButton: 'rounded-lg px-8 py-3 font-bold shadow-lg hover:shadow-xl transform hover:scale-105 transition-all'
            },
            showClass: {
                popup: 'animate__animated animate__zoomIn animate__faster'
            }
        });
    }

    // Setup Three-Dots Menu
    function setupThreeDotsMenu() {
        // Toggle dropdown menu
        document.querySelectorAll('.quote-menu-btn').forEach(btn => {
            btn.addEventListener('click', function(e) {
                e.stopPropagation();
                const dropdown = this.nextElementSibling;
                const allDropdowns = document.querySelectorAll('.quote-menu-dropdown');

                // Close other dropdowns
                allDropdowns.forEach(d => {
                    if (d !== dropdown) d.classList.add('hidden');
                });

                // Toggle current dropdown
                dropdown.classList.toggle('hidden');
            });
        });

        // Close dropdown when clicking outside
        document.addEventListener('click', function(e) {
            if (!e.target.closest('.quote-menu-container')) {
                document.querySelectorAll('.quote-menu-dropdown').forEach(dropdown => {
                    dropdown.classList.add('hidden');
                });
            }
        });

        // Handle Save/Unsave from menu
        document.querySelectorAll('.menu-save-quote').forEach(btn => {
            btn.addEventListener('click', function() {
                const quoteId = this.dataset.quoteId;
                const saveBtn = document.querySelector(`.save-btn[data-quote-id="${quoteId}"]`);
                if (saveBtn) {
                    saveBtn.click(); // Trigger existing save button
                }
                // Close dropdown
                this.closest('.quote-menu-dropdown').classList.add('hidden');
            });
        });

        // Handle Edit Quote
        document.querySelectorAll('.menu-edit-quote').forEach(btn => {
            btn.addEventListener('click', function() {
                const quoteId = this.dataset.quoteId;
                const card = document.querySelector(`.quote-card[data-quote-id="${quoteId}"]`);
                const quoteContent = card.querySelector('.quote-content').dataset.fullContent;

                // Close dropdown first
                this.closest('.quote-menu-dropdown').classList.add('hidden');

                // Show edit modal
                showEditQuoteModal(quoteId, quoteContent);
            });
        });

        // Handle Delete Quote
        document.querySelectorAll('.menu-delete-quote').forEach(btn => {
            btn.addEventListener('click', function() {
                const quoteId = this.dataset.quoteId;

                // Close dropdown first
                this.closest('.quote-menu-dropdown').classList.add('hidden');

                // Show confirmation
                Swal.fire({
                    title: 'Hapus Quote?',
                    text: 'Quote yang dihapus tidak bisa dikembalikan!',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#EF4444',
                    cancelButtonColor: '#6B7280',
                    confirmButtonText: 'Ya, Hapus!',
                    cancelButtonText: 'Batal'
                }).then((result) => {
                    if (result.isConfirmed) {
                        deleteQuote(quoteId);
                    }
                });
            });
        });

        // Handle Share from menu
        document.querySelectorAll('.menu-share-quote').forEach(btn => {
            btn.addEventListener('click', function() {
                const quoteId = this.dataset.quoteId;
                const shareBtn = document.querySelector(`.share-btn[data-quote-id="${quoteId}"]`);
                if (shareBtn) {
                    shareBtn.click(); // Trigger existing share button
                }
                // Close dropdown
                this.closest('.quote-menu-dropdown').classList.add('hidden');
            });
        });
    }

    // Show Edit Quote Modal
    function showEditQuoteModal(quoteId, currentContent) {
        Swal.fire({
            title: '‚úèÔ∏è Edit Quote',
            html: `
                <div class="text-left">
                    <label class="block text-sm font-medium text-gray-700 mb-2">Isi Quote:</label>
                    <textarea id="editQuoteContent" class="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent resize-none" rows="5" maxlength="500">${currentContent}</textarea>
                    <div class="text-right text-xs text-gray-500 mt-1">
                        <span id="editCharCount">${currentContent.length}</span>/500 karakter
                    </div>
                </div>
            `,
            showCancelButton: true,
            confirmButtonText: 'Simpan',
            cancelButtonText: 'Batal',
            confirmButtonColor: '#8B5CF6',
            cancelButtonColor: '#6B7280',
            didOpen: () => {
                const textarea = document.getElementById('editQuoteContent');
                const charCount = document.getElementById('editCharCount');
                textarea.addEventListener('input', () => {
                    charCount.textContent = textarea.value.length;
                });
                textarea.focus();
            },
            preConfirm: () => {
                const content = document.getElementById('editQuoteContent').value.trim();
                if (!content) {
                    Swal.showValidationMessage('Quote tidak boleh kosong!');
                    return false;
                }
                if (content === currentContent) {
                    Swal.showValidationMessage('Tidak ada perubahan!');
                    return false;
                }
                return content;
            }
        }).then((result) => {
            if (result.isConfirmed) {
                updateQuote(quoteId, result.value);
            }
        });
    }

    // Update Quote via AJAX
    function updateQuote(quoteId, newContent) {
        // Show loading
        Swal.fire({
            title: 'Mengupdate...',
            text: 'Mohon tunggu sebentar',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        fetch(`/ikhlas/api/quotes/${quoteId}/update`, {
            method: 'PUT',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify({ content: newContent })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Update UI
                const card = document.querySelector(`.quote-card[data-quote-id="${quoteId}"]`);
                const quoteText = card.querySelector('.quote-text');
                const quoteFull = card.querySelector('.quote-full');
                const quoteContent = card.querySelector('.quote-content');

                quoteContent.dataset.fullContent = newContent;
                if (quoteFull) quoteFull.textContent = `"${newContent}"`;
                if (quoteText) quoteText.textContent = `"${newContent}"`;

                Swal.fire({
                    icon: 'success',
                    title: 'Berhasil!',
                    text: 'Quote berhasil diupdate',
                    timer: 2000,
                    showConfirmButton: false
                });
            } else {
                throw new Error(data.message || 'Gagal mengupdate quote');
            }
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: error.message
            });
        });
    }

    // Delete Quote via AJAX
    function deleteQuote(quoteId) {
        // Show loading
        Swal.fire({
            title: 'Menghapus...',
            text: 'Mohon tunggu sebentar',
            allowOutsideClick: false,
            didOpen: () => {
                Swal.showLoading();
            }
        });

        fetch(`/ikhlas/api/quotes/${quoteId}/delete`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
            }
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Remove card from UI with animation
                const card = document.querySelector(`.quote-card[data-quote-id="${quoteId}"]`);
                card.style.opacity = '0';
                card.style.transform = 'scale(0.95)';

                setTimeout(() => {
                    card.remove();
                }, 300);

                Swal.fire({
                    icon: 'success',
                    title: 'Terhapus!',
                    text: 'Quote berhasil dihapus',
                    timer: 2000,
                    showConfirmButton: false
                });
            } else {
                throw new Error(data.message || 'Gagal menghapus quote');
            }
        })
        .catch(error => {
            Swal.fire({
                icon: 'error',
                title: 'Error!',
                text: error.message
            });
        });
    }

    // Toast Notification
    function showToast(message, type = 'success') {
        const toast = document.createElement('div');

        // Determine background color based on type
        let bgColor = 'bg-green-500';
        if (type === 'error') bgColor = 'bg-red-500';
        else if (type === 'warning') bgColor = 'bg-yellow-500';
        else if (type === 'info') bgColor = 'bg-blue-500';

        toast.className = `transform transition-all duration-300 ease-in-out ${bgColor} text-white px-6 py-3 rounded-lg shadow-lg flex items-center gap-2 max-w-sm`;
        toast.innerHTML = `
            <span>${message}</span>
            <button onclick="this.parentElement.remove()" class="ml-2 text-white hover:text-gray-200">‚úï</button>
        `;

        const container = document.getElementById('toastContainer');
        container.appendChild(toast);

        setTimeout(() => {
            toast.style.opacity = '0';
            toast.style.transform = 'translateX(100%)';
            setTimeout(() => toast.remove(), 300);
        }, 3000);
    }

    // HTML Escape Helper
    function escapeHtml(text) {
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }

    // Initialize on DOM ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

})();

// ===============================================
// Photo Modal Functions - Fullscreen View dengan Gallery
// ===============================================

let modalPhotos = []; // Array of photo URLs
let modalCurrentIndex = 0; // Current photo index

/**
 * Open photo modal with gallery support
 * @param {HTMLElement} clickedElement - Clicked photo item element
 * @param {number} startIndex - Starting photo index
 */
function openPhotoModalWithGallery(clickedElement, startIndex) {
    const modal = document.getElementById('photoModal');
    const img = document.getElementById('photoModalImg');
    const navigation = document.getElementById('modalNavigation');
    const counter = document.getElementById('modalCounter');

    if (!modal || !img) return;

    // Find all photos in the same grid (updated for grid layout)
    const photoGrid = clickedElement.closest('.photo-grid-wrapper');
    const allPhotoItems = photoGrid.querySelectorAll('.photo-item img');

    // Build photo array
    modalPhotos = Array.from(allPhotoItems).map(photo => photo.src);
    modalCurrentIndex = startIndex;

    // Update UI
    updateModalPhoto();

    // Show/hide navigation based on photo count
    if (modalPhotos.length > 1) {
        navigation.classList.remove('hidden');
        counter.classList.remove('hidden');
        updateModalCounter();
    } else {
        navigation.classList.add('hidden');
        counter.classList.add('hidden');
    }

    // Show modal
    modal.classList.remove('hidden');
    modal.offsetHeight; // Force reflow

    // Prevent body scroll
    document.body.style.overflow = 'hidden';
    document.body.style.position = 'fixed';
    document.body.style.width = '100%';

    console.log('Modal opened with gallery:', modalPhotos.length, 'photos, starting at:', startIndex);
}

/**
 * Navigate modal photo (prev/next)
 * @param {number} direction - -1 for prev, 1 for next
 */
function navigateModalPhoto(direction) {
    if (modalPhotos.length <= 1) return;

    // Calculate new index (loop around)
    modalCurrentIndex = (modalCurrentIndex + direction + modalPhotos.length) % modalPhotos.length;

    // Update photo
    updateModalPhoto();
    updateModalCounter();

    console.log('Modal navigate:', modalCurrentIndex);
}

/**
 * Update modal photo display
 */
function updateModalPhoto() {
    const img = document.getElementById('photoModalImg');
    if (img && modalPhotos[modalCurrentIndex]) {
        img.src = modalPhotos[modalCurrentIndex];
    }
}

/**
 * Update modal counter display
 */
function updateModalCounter() {
    const currentSpan = document.getElementById('modalCurrentIndex');
    const totalSpan = document.getElementById('modalTotalPhotos');

    if (currentSpan && totalSpan) {
        currentSpan.textContent = modalCurrentIndex + 1;
        totalSpan.textContent = modalPhotos.length;
    }
}

/**
 * Close photo modal
 */
function closePhotoModal() {
    const modal = document.getElementById('photoModal');
    const img = document.getElementById('photoModalImg');

    if (modal && img) {
        modal.classList.add('hidden');

        setTimeout(() => {
            img.src = '';
            modalPhotos = [];
            modalCurrentIndex = 0;
        }, 300);

        // Restore body scroll
        document.body.style.overflow = '';
        document.body.style.position = '';
        document.body.style.width = '';

        console.log('Modal closed');
    }
}

/**
 * Legacy function - redirect to new gallery function
 */
function showPhotoModal(photoSrc) {
    // Create temporary img element for compatibility
    const tempImg = document.createElement('img');
    tempImg.src = photoSrc;
    openPhotoModalWithGallery(tempImg, 0);
}

// Close modal dengan tombol ESC, navigate dengan arrow keys
document.addEventListener('keydown', function(e) {
    const modal = document.getElementById('photoModal');
    if (!modal || modal.classList.contains('hidden')) return;

    if (e.key === 'Escape') {
        closePhotoModal();
    } else if (e.key === 'ArrowLeft') {
        navigateModalPhoto(-1);
    } else if (e.key === 'ArrowRight') {
        navigateModalPhoto(1);
    }
});

// Add swipe gesture for modal on mobile
document.addEventListener('DOMContentLoaded', function() {
    const modal = document.getElementById('photoModal');
    if (!modal) return;

    let touchStartX = 0;
    let touchEndX = 0;
    let touchStartTime = 0;

    modal.addEventListener('touchstart', (e) => {
        touchStartX = e.touches[0].clientX;
        touchStartTime = Date.now();
    }, { passive: true });

    modal.addEventListener('touchmove', (e) => {
        touchEndX = e.touches[0].clientX;
    }, { passive: true });

    modal.addEventListener('touchend', () => {
        const swipeDistance = touchStartX - touchEndX;
        const swipeTime = Date.now() - touchStartTime;

        // Check if valid swipe (min 50px, max 300ms)
        if (Math.abs(swipeDistance) > 50 && swipeTime < 300) {
            if (swipeDistance > 0) {
                // Swipe left ‚Üí next photo
                navigateModalPhoto(1);
            } else {
                // Swipe right ‚Üí prev photo
                navigateModalPhoto(-1);
            }
        }
    }, { passive: true });

    console.log('‚úÖ Modal swipe gesture initialized');
});

// ===============================================
// PHOTO GRID - No carousel needed, all photos visible
// ===============================================
// Carousel removed - using grid layout instead
// All photos are now visible side-by-side in grid
console.log('‚úÖ Photo grid layout initialized');
</script>

<style>
/* Quote Card Animations */
.quote-card {
    animation: fadeInUp 0.3s ease-out;
}

/* Quote Content Transitions */
.quote-text, .quote-full {
    transition: opacity 0.3s ease-in-out;
}

.read-more-btn {
    transition: all 0.2s ease-in-out;
}

.read-more-btn:hover {
    transform: translateY(-1px);
}

.read-more-icon {
    transition: transform 0.3s ease-in-out;
}

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Button hover effects */
button {
    user-select: none;
    -webkit-tap-highlight-color: transparent;
}

/* Toast container */
#toastContainer > * {
    animation: slideInRight 0.3s ease-out;
}

@keyframes slideInRight {
    from {
        opacity: 0;
        transform: translateX(100%);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

/* Comments Section Animations */
@keyframes slideDown {
    from {
        opacity: 0;
        max-height: 0;
        transform: translateY(-10px);
    }
    to {
        opacity: 1;
        max-height: 1000px;
        transform: translateY(0);
    }
}

@keyframes slideUp {
    from {
        opacity: 1;
        max-height: 1000px;
        transform: translateY(0);
    }
    to {
        opacity: 0;
        max-height: 0;
        transform: translateY(-10px);
    }
}

/* Comments section default state */
.comments-section {
    overflow: hidden;
    transition: all 0.3s ease-out;
}

/* Nested Comments Styling */
.comment-item {
    position: relative;
}

.replies-container {
    position: relative;
}

.replies-container::before {
    content: '';
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 2px;
    background: linear-gradient(to bottom, #c084fc, #e879f9);
    opacity: 0.5;
}

.replies-container .comment-item {
    animation: fadeInLeft 0.3s ease-out;
}

@keyframes fadeInLeft {
    from {
        opacity: 0;
        transform: translateX(-10px);
    }
    to {
        opacity: 1;
        transform: translateX(0);
    }
}

/* ===============================================
   PHOTO MODAL - Z-INDEX TERTINGGI (FIXED!)
   =============================================== */
#photoModal {
    z-index: 99999 !important;
    opacity: 0;
    transition: opacity 0.3s ease-in-out;
    pointer-events: none;
}

#photoModal:not(.hidden) {
    opacity: 1;
    pointer-events: auto;
}

#photoModalImg {
    transform: scale(0.95);
    transition: transform 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

#photoModal:not(.hidden) #photoModalImg {
    transform: scale(1);
}

/* Prevent body scroll when modal open */
body.modal-open {
    overflow: hidden !important;
    position: fixed;
    width: 100%;
}

/* ===============================================
   PHOTO GRID STYLING
   =============================================== */
.photo-grid-wrapper {
    display: grid;
}

.photo-item {
    position: relative;
    overflow: hidden;
    background-color: #f3f4f6 !important; /* bg-gray-100 */
}

.photo-item img {
    transition: transform 0.3s ease;
    width: 100% !important;
    height: 100% !important;
    object-fit: cover !important;
    display: block !important;
    background-color: transparent !important;
    position: relative !important;
    z-index: 1 !important;
}

.photo-item:hover img {
    transform: scale(1.05);
}

.photo-item .absolute {
    pointer-events: none;
}

.photo-item .absolute.top-2 {
    pointer-events: auto;
}

/* Photo counter badge */
.photo-item .absolute.top-2 {
    z-index: 15;
}

/* ===============================================
   PHOTO PREVIEW (Upload Form)
   =============================================== */
#photoPreviewContainer {
    transition: all 0.3s ease;
}

#photoPreviewContainer > div {
    animation: fadeInScale 0.3s ease-out;
}

@keyframes fadeInScale {
    from {
        opacity: 0;
        transform: scale(0.95);
    }
    to {
        opacity: 1;
        transform: scale(1);
    }
}

/* Make delete button more touch-friendly on mobile */
@media (max-width: 640px) {
    #photoPreviewContainer button {
        width: 32px !important;
        height: 32px !important;
        top: 8px !important;
        right: 8px !important;
    }

    #photoPreviewContainer button svg {
        width: 18px !important;
        height: 18px !important;
    }
}

/* ===============================================
   SUBMIT BUTTON STYLING
   =============================================== */
#submitQuoteBtn {
    background: linear-gradient(135deg, #7c3aed 0%, #ec4899 50%, #7c3aed 100%) !important;
    position: relative;
    overflow: hidden;
}

#submitQuoteBtn::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
    transition: left 0.5s;
}

#submitQuoteBtn:hover::before {
    left: 100%;
}

#submitQuoteBtn:active {
    transform: scale(0.98) !important;
}

#submitQuoteBtn:disabled {
    background: linear-gradient(135deg, #9ca3af 0%, #6b7280 50%, #9ca3af 100%) !important;
    cursor: not-allowed !important;
}

/* ===============================================
   Z-INDEX HIERARCHY
   =============================================== */
/* 99999 = Photo Modal (TERTINGGI) */
/* 100 = Menu Dropdown */
/* 30 = Card Header */
/* 25 = Carousel Navigation */
/* 20 = Card Container */
/* 10 = Photo Content */

.quote-menu-dropdown {
    z-index: 100 !important;
}

.quote-card {
    position: relative;
    z-index: 1;
}

.quote-card > div:first-child {
    position: relative;
    z-index: 30;
}

/* Prevent image background issues */
img {
    background-color: transparent !important;
}

.quote-card img {
    background: transparent !important;
    display: block;
}

/* Photo hover effect */
.group:hover .group-hover\:bg-opacity-10 {
    background-opacity: 0.1;
}

/* Modal navigation buttons */
#modalNavigation button {
    transition: all 0.2s ease;
}

#modalNavigation button:hover {
    transform: scale(1.1) translateY(-50%);
}

/* Responsive adjustments */
@media (max-width: 640px) {
    .quote-card blockquote {
        font-size: 0.95rem;
        line-height: 1.5;
    }

    /* Make stats bar responsive */
    .bg-gray-50.rounded-lg .flex.justify-between {
        flex-direction: column;
        gap: 0.5rem;
        align-items: flex-start;
    }

    .bg-gray-50.rounded-lg .text-right {
        text-align: left;
        width: 100%;
    }

    /* Optimize photo grid for mobile */
    .photo-item.h-80 {
        height: 18rem !important; /* Single photo */
    }

    .photo-item.h-64 {
        height: 14rem !important; /* 2 photos side by side */
    }

    .photo-item.h-48 {
        height: 12rem !important; /* 3+ photos */
    }

    /* Modal full viewport on mobile */
    #photoModalImg {
        max-w-[98vw] !important;
        max-h-[98vh] !important;
    }

    /* Modal navigation on mobile - smaller buttons */
    #modalNavigation button {
        width: 44px !important;
        height: 44px !important;
        padding: 10px !important;
    }

    #modalNavigation button svg {
        width: 24px !important;
        height: 24px !important;
    }

    /* Modal counter on mobile */
    #modalCounter {
        font-size: 12px !important;
        padding: 6px 10px !important;
    }
}

/* DEBUG: Force image visibility - remove if images show correctly */
.photo-item img[src*="inspirasi"] {
    opacity: 1 !important;
    visibility: visible !important;
    background: transparent !important;
    min-height: 100% !important;
}
</style>

<script>
// DEBUG: Check if images are loading
document.addEventListener('DOMContentLoaded', function() {
    console.log('üîç Checking photo items...');
    const photoItems = document.querySelectorAll('.photo-item');
    console.log(`Found ${photoItems.length} photo items`);

    photoItems.forEach((item, index) => {
        const img = item.querySelector('img');
        if (img) {
            console.log(`Photo ${index + 1}:`, {
                src: img.src,
                complete: img.complete,
                naturalWidth: img.naturalWidth,
                naturalHeight: img.naturalHeight,
                displayed: img.offsetWidth > 0 && img.offsetHeight > 0
            });

            // Force reload if image failed
            if (img.complete && img.naturalWidth === 0) {
                console.warn(`‚ö†Ô∏è Photo ${index + 1} failed to load, trying again...`);
                const originalSrc = img.src;
                img.src = '';
                setTimeout(() => {
                    img.src = originalSrc;
                }, 100);
            }
        }
    });
});
</script>

{% endblock %}
